
import com.ozten.font.JFontChooser;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.UndoManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Admin
 */
public class MTEframe extends javax.swing.JFrame {

    /**
     * Creates new form MTEframe
     */
    String savetext;
    int x1, y1, x2, y2;
    String copy;
    UndoManager editManager; 

    public MTEframe() {
        initComponents();
        editManager = new UndoManager();
        /*Undoable edit events occur when an operation that can be undone 
        occurs on a component. Currently, only text components fire undoable 
        edit events, and then only indirectly. The text component's document 
        fires the events. For text components, undoable operations include 
        inserting characters, deleting characters, and modifying the style 
        of text. Programs typically listen to undoable edit events to assist in 
        the implementation of undo and redo commands.        
        */
        txt.getDocument().addUndoableEditListener((UndoableEditEvent uee) -> {
            editManager.addEdit(uee.getEdit());
        });
    }

    public JTextArea getText() {
        return txt;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnPopMenu = new javax.swing.JPopupMenu();
        popCopy = new javax.swing.JMenuItem();
        popCut = new javax.swing.JMenuItem();
        popDelete = new javax.swing.JMenuItem();
        popFind = new javax.swing.JMenuItem();
        popReplace = new javax.swing.JMenuItem();
        popPaste = new javax.swing.JMenuItem();
        popUndo = new javax.swing.JMenuItem();
        popRedo = new javax.swing.JMenuItem();
        popSelectAll = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnNew = new javax.swing.JMenuItem();
        mnNewWindow = new javax.swing.JMenuItem();
        mnOpen = new javax.swing.JMenuItem();
        mnSave = new javax.swing.JMenuItem();
        mnSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnCopy = new javax.swing.JMenuItem();
        mnCut = new javax.swing.JMenuItem();
        mnDel = new javax.swing.JMenuItem();
        mnFind = new javax.swing.JMenuItem();
        mnReplace = new javax.swing.JMenuItem();
        mnPaste = new javax.swing.JMenuItem();
        mnUndo = new javax.swing.JMenuItem();
        mnRedo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnSelect = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnFont = new javax.swing.JMenuItem();

        popCopy.setText("Copy");
        popCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCopyActionPerformed(evt);
            }
        });
        mnPopMenu.add(popCopy);

        popCut.setText("Cut");
        popCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCutActionPerformed(evt);
            }
        });
        mnPopMenu.add(popCut);

        popDelete.setText("Delete");
        popDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popDeleteActionPerformed(evt);
            }
        });
        mnPopMenu.add(popDelete);

        popFind.setText("Find");
        popFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popFindActionPerformed(evt);
            }
        });
        mnPopMenu.add(popFind);

        popReplace.setText("Replace");
        popReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popReplaceActionPerformed(evt);
            }
        });
        mnPopMenu.add(popReplace);

        popPaste.setText("Paste");
        popPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popPasteActionPerformed(evt);
            }
        });
        mnPopMenu.add(popPaste);

        popUndo.setText("Undo");
        popUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUndoActionPerformed(evt);
            }
        });
        mnPopMenu.add(popUndo);

        popRedo.setText("Redo");
        popRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popRedoActionPerformed(evt);
            }
        });
        mnPopMenu.add(popRedo);

        popSelectAll.setText("Select All");
        popSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popSelectAllActionPerformed(evt);
            }
        });
        mnPopMenu.add(popSelectAll);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DemoNotePad");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txt.setColumns(20);
        txt.setRows(5);
        txt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txt);

        jMenu1.setText("File");

        mnNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnNew.setMnemonic('C');
        mnNew.setText("New");
        mnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNewActionPerformed(evt);
            }
        });
        jMenu1.add(mnNew);

        mnNewWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnNewWindow.setText("New Window");
        mnNewWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNewWindowActionPerformed(evt);
            }
        });
        jMenu1.add(mnNewWindow);

        mnOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnOpen.setText("Open");
        mnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnOpen);

        mnSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnSave.setText("Save");
        mnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnSave);

        mnSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnSaveAs.setText("Save as");
        mnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(mnSaveAs);
        jMenu1.add(jSeparator1);

        mnExit.setText("Exit");
        mnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        mnCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mnCopy.setText("Copy");
        mnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCopyActionPerformed(evt);
            }
        });
        jMenu2.add(mnCopy);

        mnCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnCut.setText("Cut");
        mnCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCutActionPerformed(evt);
            }
        });
        jMenu2.add(mnCut);

        mnDel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mnDel.setText("Delete");
        mnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDelActionPerformed(evt);
            }
        });
        jMenu2.add(mnDel);

        mnFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnFind.setText("Find");
        mnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnFindActionPerformed(evt);
            }
        });
        jMenu2.add(mnFind);

        mnReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        mnReplace.setText("Replace");
        mnReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(mnReplace);

        mnPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mnPaste.setText("Paste");
        mnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPasteActionPerformed(evt);
            }
        });
        jMenu2.add(mnPaste);

        mnUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnUndo.setText("Undo");
        mnUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnUndoActionPerformed(evt);
            }
        });
        jMenu2.add(mnUndo);

        mnRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnRedo.setText("Redo");
        mnRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnRedoActionPerformed(evt);
            }
        });
        jMenu2.add(mnRedo);
        jMenu2.add(jSeparator2);

        mnSelect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mnSelect.setText("Select All");
        mnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSelectActionPerformed(evt);
            }
        });
        jMenu2.add(mnSelect);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Format");

        mnFont.setText("Font");
        mnFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnFontActionPerformed(evt);
            }
        });
        jMenu3.add(mnFont);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNewActionPerformed
        // TODO add your handling code here:
        if (!txt.getText().equals("")) {
            int ans = JOptionPane.showConfirmDialog(null, "Do you save?", "Warning", JOptionPane.YES_NO_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                JFileChooser fc = new JFileChooser();
                int choice = fc.showSaveDialog(null);
                if (choice == JFileChooser.APPROVE_OPTION) {
                    File f = fc.getSelectedFile();
                    if (f.exists()) { //Check if file is existed 
                        int ans1 = JOptionPane.showConfirmDialog(null, "This file name is existed already !"
                                + "\nDo you want to replace it ?", "Warning", JOptionPane.YES_NO_OPTION);
                        if (ans1 == JOptionPane.YES_OPTION) //if 'Yes'
                        {
                            saveFile(f);
                            txt.setText("");
                        } else { //If 'No'

                        }
                    } else //if file is not existed
                    {
                        saveFile(f);
                        txt.setText("");
                    }
                }
            } else {
                txt.setText("");
            }
        }
    }//GEN-LAST:event_mnNewActionPerformed

    private void mnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpenActionPerformed
        // TODO add your handling code here:
        if (txt.getText().equals("")) {
            JFileChooser fc = new JFileChooser();
            int choice = fc.showOpenDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION) {
                File f = fc.getSelectedFile();
                txt.setText(f.toString());
            }
        } else if (!txt.getText().equals("")) {
            JFileChooser fc = new JFileChooser();
            int choice = fc.showOpenDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION) {
                File f = fc.getSelectedFile();
                MTEframe x = new MTEframe();
                x.txt.setText(f.toString());
                x.setVisible(true);
            }
        }
    }//GEN-LAST:event_mnOpenActionPerformed

    private void mnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveAsActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int choice = fc.showSaveDialog(null);
        if (choice == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            if (f.exists()) //Check if file is existed
            {
                int ans1 = JOptionPane.showConfirmDialog(null, "This file name is existed already !"
                        + "\nDo you want to replace it ?", "Warning", JOptionPane.YES_NO_OPTION);
                if (ans1 == JOptionPane.YES_OPTION) //if 'Yes'
                {
                    saveFile(f);
                    savetext = txt.getText();
                    txt.setText("");
                } else { //if 'No'

                }
            } else //Check if file is not existed
            {
                saveFile(f);
                savetext = txt.getText();
                txt.setText("");
            }
        }


    }//GEN-LAST:event_mnSaveAsActionPerformed

    private void mnNewWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNewWindowActionPerformed
        // TODO add your handling code here:
        MTEframe x = new MTEframe();
        x.setVisible(true);
    }//GEN-LAST:event_mnNewWindowActionPerformed

    private void mnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDelActionPerformed
        // TODO add your handling code here:
        txt.replaceSelection("");
    }//GEN-LAST:event_mnDelActionPerformed

    private void mnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCopyActionPerformed
        // TODO add your handling code here:
        txt.copy();
    }//GEN-LAST:event_mnCopyActionPerformed

    private void mnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnFindActionPerformed
        // TODO add your handling code here:
        BoxFind x = new BoxFind(this, true);
        x.setVisible(true);
    }//GEN-LAST:event_mnFindActionPerformed

    private void mnReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnReplaceActionPerformed
        // TODO add your handling code here:
        BoxReplace x = new BoxReplace(this, true);
        x.setVisible(true);
    }//GEN-LAST:event_mnReplaceActionPerformed

    private void mnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSelectActionPerformed
        // TODO add your handling code here:
        txt.selectAll();
    }//GEN-LAST:event_mnSelectActionPerformed

    private void mnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnExitActionPerformed
        // TODO add your handling code here:
        if (!txt.getText().equals("")) {
            int ans = JOptionPane.showConfirmDialog(null, "Do you save?", "warning", JOptionPane.YES_NO_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                JFileChooser fc = new JFileChooser();
                int choice = fc.showSaveDialog(null);
                if (choice == JFileChooser.APPROVE_OPTION) {
                    File f = fc.getSelectedFile();
                    if (f.exists()) { //Check if file is existed
                        int ans1 = JOptionPane.showConfirmDialog(null, "This file name is existed already !"
                                + "\nDo you want to replace it ?", "Warning", JOptionPane.YES_NO_OPTION);
                        if (ans1 == JOptionPane.YES_OPTION) //if 'Yes'
                        {
                            saveFile(f);
                            System.exit(0);
                        } else { //if 'No'
                            System.exit(0);
                        }
                    } else { //Check if file is not existed
                        saveFile(f);
                        System.exit(0);
                    }
                }
            } else if (ans == JOptionPane.NO_OPTION) {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_mnExitActionPerformed

    private void mnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveActionPerformed
        // TODO add your handling code here:
        if (!txt.getText().equals(savetext)) {
            JFileChooser fc = new JFileChooser();
            int choice = fc.showSaveDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION) {
                File f = fc.getSelectedFile();
                if (f.exists()) //Check file if file is existed
                {
                    int ans1 = JOptionPane.showConfirmDialog(null, "This file name is existed already !"
                            + "\nDo you want to replace it ?", "Warning", JOptionPane.YES_NO_OPTION);
                    if (ans1 == JOptionPane.YES_OPTION) //if 'Yes'
                    {
                        saveFile(f);
                        savetext = txt.getText();
                    } else { //if 'No'

                    }
                } else //Check file if file is not existed
                {
                    saveFile(f);
                    savetext = txt.getText();
                }

            }
        }
    }//GEN-LAST:event_mnSaveActionPerformed

    private void txtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMouseClicked
        // TODO add your handling code here:
        //if Mouse clicked is on the right 
        if (evt.getButton() == 3) {
            mnPopMenu.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
            mnPopMenu.setVisible(true);
        } else {
            mnPopMenu.setVisible(false);
            x1 = evt.getX();
            y1 = evt.getY();
        }
    }//GEN-LAST:event_txtMouseClicked

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        // TODO add your handling code here:
        if (mnPopMenu.isVisible()) {
            mnPopMenu.setVisible(false);
        }
    }//GEN-LAST:event_formComponentMoved

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        mnExitActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void mnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPasteActionPerformed
        // TODO add your handling code here:
        txt.paste();
    }//GEN-LAST:event_mnPasteActionPerformed

    private void txtMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMouseReleased
        // TODO add your handling code here:
        x2 = evt.getX();
        y2 = evt.getY();
    }//GEN-LAST:event_txtMouseReleased

    private void mnCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCutActionPerformed
        // TODO add your handling code here:
        txt.cut();
    }//GEN-LAST:event_mnCutActionPerformed

    private void mnFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnFontActionPerformed
        // TODO add your handling code here:
        JFontChooser font = new JFontChooser();
        JOptionPane.showMessageDialog(null, font);
        txt.setFont(font.getPreviewFont());
    }//GEN-LAST:event_mnFontActionPerformed

    private void mnRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnRedoActionPerformed
        // TODO add your handling code here:        
        editManager.redo();
    }//GEN-LAST:event_mnRedoActionPerformed

    private void mnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnUndoActionPerformed
        // TODO add your handling code here:        
        editManager.undo();
    }//GEN-LAST:event_mnUndoActionPerformed

    private void popCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCopyActionPerformed
        // TODO add your handling code here:
        txt.copy();
    }//GEN-LAST:event_popCopyActionPerformed

    private void popCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCutActionPerformed
        // TODO add your handling code here:
        txt.cut();
    }//GEN-LAST:event_popCutActionPerformed

    private void popDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popDeleteActionPerformed
        // TODO add your handling code here:
        txt.replaceSelection("");
    }//GEN-LAST:event_popDeleteActionPerformed

    private void popFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popFindActionPerformed
        // TODO add your handling code here:
        BoxFind x = new BoxFind(this, true);
        x.setVisible(true);
    }//GEN-LAST:event_popFindActionPerformed

    private void popReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popReplaceActionPerformed
        // TODO add your handling code here:
        BoxReplace x = new BoxReplace(this, true);
        x.setVisible(true);
    }//GEN-LAST:event_popReplaceActionPerformed

    private void popPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popPasteActionPerformed
        // TODO add your handling code here:
        txt.paste();
    }//GEN-LAST:event_popPasteActionPerformed

    private void popUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUndoActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_popUndoActionPerformed

    private void popRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popRedoActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_popRedoActionPerformed

    private void popSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popSelectAllActionPerformed
        // TODO add your handling code here:
        txt.selectAll();
    }//GEN-LAST:event_popSelectAllActionPerformed
    public void saveFile(File f) {
        PrintWriter w = null;
        try {
            w = new PrintWriter(f);
            w.print(txt.getText());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (w != null) {
                    w.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MTEframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MTEframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MTEframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MTEframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MTEframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem mnCopy;
    private javax.swing.JMenuItem mnCut;
    private javax.swing.JMenuItem mnDel;
    private javax.swing.JMenuItem mnExit;
    private javax.swing.JMenuItem mnFind;
    private javax.swing.JMenuItem mnFont;
    private javax.swing.JMenuItem mnNew;
    private javax.swing.JMenuItem mnNewWindow;
    private javax.swing.JMenuItem mnOpen;
    private javax.swing.JMenuItem mnPaste;
    private javax.swing.JPopupMenu mnPopMenu;
    private javax.swing.JMenuItem mnRedo;
    private javax.swing.JMenuItem mnReplace;
    private javax.swing.JMenuItem mnSave;
    private javax.swing.JMenuItem mnSaveAs;
    private javax.swing.JMenuItem mnSelect;
    private javax.swing.JMenuItem mnUndo;
    private javax.swing.JMenuItem popCopy;
    private javax.swing.JMenuItem popCut;
    private javax.swing.JMenuItem popDelete;
    private javax.swing.JMenuItem popFind;
    private javax.swing.JMenuItem popPaste;
    private javax.swing.JMenuItem popRedo;
    private javax.swing.JMenuItem popReplace;
    private javax.swing.JMenuItem popSelectAll;
    private javax.swing.JMenuItem popUndo;
    private javax.swing.JTextArea txt;
    // End of variables declaration//GEN-END:variables
}
